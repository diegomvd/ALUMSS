// output files
val agreOut = Val[File]
val f = Val[File]

// random number generator seed
val mySeed = Val[Int]

// model parameters
val ksi = Val[Double]
val sar = Val[Double]
val a = Val[Double]
val w = Val[Double]
val Tag = Val[Double]
val Tab = Val[Double]
val Tr = Val[Double]
val Td = Val[Double]
val d = Val[Double]

// simulation parameters
val T = Val[Double]
val dtp = Val[Double]
val L = Val[Double]
val d0 = Val[Double]
val a0 = Val[Double]
val dtsave = Val[Double]

// variable outputs
val t = Val[Double]
val nFrag = Val[Double]
val meanSize = Val[Double]
val stdSize = Val[Double]
val maxSize = Val[Double]
val meanES = Val[Double]
val stdES = Val[Double]
val P = Val[Double]
val N = Val[Double]
val D = Val[Double]
val A0 = Val[Double]
val A1 = Val[Double]
val Y = Val[Double]
val ripleyN = Val[Double]
val ripleyD = Val[Double]
val ripleyA0 = Val[Double]
val ripleyA1 = Val[Double]


///////////////////////////////////////////////////////////////////////////////
// 1- model plugin with all the parameter inputs as well as the output files
///////////////////////////////////////////////////////////////////////////////

val scriptTask =
  SystemExecTask(
    command = Seq(
      "./gillespie-ses ${T} ${dtp} ${L} ${a0} ${d0} ${ksi} ${sar} ${a} ${w} ${Tag} ${Tab} ${Tr} ${Td} ${d} ${dtsave} ${mySeed} "),
    )set(
      (inputs, outputs) += (T,dtp,L,a0,d0,ksi,sar,a,w,Tag,Tab,Tr,Td,d,dtsave,mySeed),
      outputFiles += ("DATA_AGRE_T_${T}_dtp_${dtp}_n_${L}_a0_${a0}_d0_${d0}_ksi_${ksi}_sar_${sar}_a_${a}_w_${w}_Tag_${Tag}_Tab_${Tab}_Tr_${Tr}_Td_${Td}_d_${d}_dtsave_${dtsave}_expid_${mySeed}.dat",agreOut),
      resources+="/home/AD.LSM.CNRS.FR/diego.bengochea-paz/gillespie-land-use/gillespie-ses",
      // resources+="/home/karpouzi/Research/Chapter2/gillespie-land-use/gillespie-ses",

      // default parameter and initialization values
      T:=2500.0,
      dtp:=0.1,
      L:=40,
      a0:=0.25,
      d0:=0.0,
      ksi:=1.0,
      sar:=0.25,
      a:=0.0,
      w:=0.0,
      Tag:=0.05,
      Tab:=20.0,
      Tr:=10.0,
      Td:=50.0,
      d:=0.025,
      dtsave:=1.0,
      mySeed:=1111
    )

///////////////////////////////////////////////////////////////////////////////
// 2 - hooks
///////////////////////////////////////////////////////////////////////////////

// hook to append the output across time of a simulation a replications file.
// the name of the replication file contains the information on the parameter
// values
val hookAppend = AppendToFileHook(workDirectory/"REPS_AGRE_T_${T}_dtp_${dtp}_n_${L}_a0_${a0}_d0_${d0}_ksi_${ksi}_sar_${sar}_a_${a}_w_${w}_Tag_${Tag}_Tab_${Tab}_Tr_${Tr}_Td_${Td}_d_${d}_dtsave_${dtsave}.csv", "${agreOut.content}")

// hook to create and initialize the header of a replications file. file must
// be previously created in a scalaTask
// the name of the replication file contains the information on the parameter
// values
val copyHook = CopyFileHook(f, workDirectory/"REPS_AGRE_T_${T}_dtp_${dtp}_n_${L}_a0_${a0}_d0_${d0}_ksi_${ksi}_sar_${sar}_a_${a}_w_${w}_Tag_${Tag}_Tab_${Tab}_Tr_${Tr}_Td_${Td}_d_${d}_dtsave_${dtsave}.csv")

///////////////////////////////////////////////////////////////////////////////
// 3- ScalaTasks to read outputs or setup a replication experiment
///////////////////////////////////////////////////////////////////////////////

// initialize replication experiment and the replications data file
val setParameterValues=ScalaTask("""
    // here set the parameter values for the replication experiment
    val ksi = 1.5
    val sar = 0.25
    val a = 0.0
    val w = 0.0
    val Tag = 0.1
    val Tab = 10.0
    val Tr = 1.0
    val Td = 7.5
    val d = 1.0
    val T = 1000.0
    val dtp = 0.1
    val L = 40.0
    val d0 = 0.0
    val a0 = 0.2
    val dtsave = 1.0
    // create a file with a header consisting of all the model macro outputs
    val f = newFile()
    f.content = "t P N D A0 A1 Y nFrag meanSize stdSize maxSize meanES stdES ripleyN ripleyD ripleyA0 ripleyA1\n"
""") set(
    outputs +=(f,T,dtp,L,a0,d0,ksi,sar,a,w,Tag,Tab,Tr,Td,d,dtsave)
)

// initialize replication experiment and the replications data file
val setParameterValues1=ScalaTask("""
    // here set the parameter values for the replication experiment
    val ksi = 1.0
    val sar = 0.25
    val a = 0.0
    val w = 0.0
    val Tag = 0.1
    val Tab = 1.0
    val Tr = 2.0
    val Td = 10.0
    val d = 1.0
    val T = 1.0
    val dtp = 0.1
    val L = 40.0
    val d0 = 0.0
    val a0 = 0.3
    val dtsave = 1.0
    // create a file with a header consisting of all the model macro outputs
    val f = newFile()
    f.content = "t P N D A0 A1 Y nFrag meanSize stdSize maxSize meanES stdES ripleyN ripleyD ripleyA0 ripleyA1\n"
""") set(
    outputs +=(f,T,dtp,L,a0,d0,ksi,sar,a,w,Tag,Tab,Tr,Td,d,dtsave)
)


// use this function when looking at the final state as an output
val readOutputFinalState =
    ScalaTask("""
    // read file as an array of lines and get last line
    val lastLineAgre = scala.io.Source.fromFile(agreOut).getLines.toList.last.mkString
    // split the string and store it in an array
    val valuesAgre = lastLineAgre.split(" ")

    // store each value of the values array independently to pass to outputs of
    // scala function
    // val t = valuesAgre(0).toDouble

    val P = valuesAgre(1).toDouble
    val N = valuesAgre(2).toDouble
    // val D = valuesAgre(3).toDouble
    // val A0 = valuesAgre(4).toDouble
    // val A1 = valuesAgre(5).toDouble
    // val Y = valuesAgre(6).toDouble
    //
    // val nFrag = valuesAgre(7).toDouble
    // val maxSize = valuesAgre(8).toDouble
    // val meanSize = valuesAgre(9).toDouble
    // val stdSize = valuesAgre(10).toDouble
    // val meanES = valuesAgre(11).toDouble
    // val stdES = valuesAgre(12).toDouble
    //
    // val ripleyN = valuesAgre(13).toDouble
    // val ripleyD = valuesAgre(14).toDouble
    // val ripleyA0 = valuesAgre(15).toDouble
    // val ripleyA1 = valuesAgre(16).toDouble
    """

    )set(
        inputs+=agreOut,
        (inputs, outputs)+=(T,dtp,L,a0,d0,ksi,sar,a,w,Tag,Tab,Tr,Td,d,dtsave,mySeed),
        // outputs+=(t,P,N,D,A0,A1,Y,nFrag,maxSize,meanSize,stdSize,meanES,stdES,ripleyN,ripleyD,ripleyA0,ripleyA1)
        outputs+=(P,N)

    )

///////////////////////////////////////////////////////////////////////////////
// 4 - compund moleTasks
///////////////////////////////////////////////////////////////////////////////

val finalStateTask= MoleTask(scriptTask -- readOutputFinalState)

///////////////////////////////////////////////////////////////////////////////
// 6- environment setup
///////////////////////////////////////////////////////////////////////////////

val env = LocalEnvironment(20)

//////////////////////////////////////////////////////////////////////////////
// 5- replication setups
//////////////////////////////////////////////////////////////////////////////

// use this function to get all the data across time stored
val replicationsFullTime =
  Replication(
    evaluation = scriptTask hook hookAppend on env,
    seed = mySeed,
    sample = 20
  )

// use this function to get only the final state
val replicationsFinal =
  Replication(
    evaluation = finalStateTask,
    seed = mySeed,
    sample = 1,
    aggregation = Seq (
      T aggregate average,
      dtp aggregate average,
      L aggregate average,
      a0 aggregate average,
      d0 aggregate average,
      ksi aggregate average,
      sar aggregate average,
      a aggregate average,
      w aggregate average,
      Tag aggregate average,
      Tab aggregate average,
      Tr aggregate average,
      Td aggregate average,
      d aggregate average,
      dtsave aggregate average,
      mySeed aggregate average,
      // t aggregate average,
      P aggregate average,
      N aggregate average)
      // D aggregate average,
      // A0 aggregate average,
      // A1 aggregate average,
      // Y aggregate average,
      // nFrag aggregate average,
      // maxSize aggregate average,
      // meanSize aggregate average,
      // stdSize aggregate average,
      // meanES aggregate average,
      // stdES aggregate average,
      // ripleyN aggregate average,
      // ripleyD aggregate average,
      // ripleyA0 aggregate average,
      // ripleyA1 aggregate average)
  )

///////////////////////////////////////////////////////////////////////////////
// 7- experiments and workflows
///////////////////////////////////////////////////////////////////////////////

(setParameterValues hook copyHook) -- replicationsFullTime
// (setParameterValues1 hook copyHook) -- replicationsFullTime

// DirectSampling(
//   evaluation = replicationsFinal on env,
//   sampling =
//     (Tr in LogRange(0.01,2.0,10) ) x
//     (d0 in (0.1 to 1.0 by 0.1) ) x
//     (d in LogRange(0.01,10.0,4)),
// ) hook (workDirectory / "experimentTrD0D-nopop-080421.csv")

// DirectSampling(
//   evaluation = replicationsFinal on env,
//   sampling =
//     (Tag in LogRange(0.05,1.0,10) ) x
//     (Tab in (1.0 to 20.0 by 2.0) ),
// ) hook (workDirectory / "experimentTabTag-080421.csv")





///////////////////////////////////////////////////////////////////////////////
// 8 - workflow
//////////////////////////////////////////////////////////////////////////////

/// think about how to do 1-D sampling full time
