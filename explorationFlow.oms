// output files
val agreOut = Val[File]
val f = Val[File]

// random number generator seed
val mySeed = Val[Int]

// model parameters
val ksi = Val[Double]
val sar = Val[Double]
val a = Val[Double]
val w = Val[Double]
val Tag = Val[Double]
val Tab = Val[Double]
val Tr = Val[Double]
val Td = Val[Double]
val d = Val[Double]

// simulation parameters
val T = Val[Double]
val dtp = Val[Double]
val L = Val[Double]
val d0 = Val[Double]
val a0 = Val[Double]
val dtsave = Val[Double]

// variable outputs
val t = Val[Double]
val nFrag = Val[Double]
val meanSize = Val[Double]
val stdSize = Val[Double]
val maxSize = Val[Double]
val meanES = Val[Double]
val stdES = Val[Double]
val P = Val[Double]
val N = Val[Double]
val D = Val[Double]
val A0 = Val[Double]
val A1 = Val[Double]
val Y = Val[Double]
val C = Val[Double]
val nMax = Val[Double]
val nMin = Val[Double]
val pMax = Val[Double]
val pMin = Val[Double]
val ripleyN = Val[Double]
val ripleyD = Val[Double]
val ripleyA0 = Val[Double]
val ripleyA1 = Val[Double]


///////////////////////////////////////////////////////////////////////////////
// 1- model plugin with all the parameter inputs as well as the output files
///////////////////////////////////////////////////////////////////////////////

val scriptTask =
  SystemExecTask(
    command = Seq(
      "./gillespie-ses ${T} ${dtp} ${L} ${a0} ${d0} ${ksi} ${sar} ${a} ${w} ${Tag} ${Tab} ${Tr} ${Td} ${d} ${dtsave} ${mySeed} "),
    )set(
      (inputs, outputs) += (T,dtp,L,a0,d0,ksi,sar,a,w,Tag,Tab,Tr,Td,d,dtsave,mySeed),
      outputFiles += ("DATA_AGRE_T_${T}_dtp_${dtp}_n_${L}_a0_${a0}_d0_${d0}_ksi_${ksi}_sar_${sar}_a_${a}_w_${w}_Tag_${Tag}_Tab_${Tab}_Tr_${Tr}_Td_${Td}_d_${d}_dtsave_${dtsave}_expid_${mySeed}.dat",agreOut),
      resources+="/home/AD.LSM.CNRS.FR/diego.bengochea-paz/gillespie-land-use/gillespie-ses",
      // resources+="/home/karpouzi/Research/Chapter2/gillespie-land-use/gillespie-ses",

      // default parameter and initialization values
      T:=6000.0,
      dtp:=0.1,
      L:=40,
      a0:=0.1,
      d0:=0.0,
      ksi:=1.2,
      sar:=0.25,
      a:=0.2,
      w:=0.0,
      Tag:=0.05,
      Tab:=50.0,
      Tr:=5.0,
      Td:=50.0,
      d:=1.0,
      dtsave:=1.0,
      mySeed:=1111
    )

///////////////////////////////////////////////////////////////////////////////
// 2 - hooks
///////////////////////////////////////////////////////////////////////////////

// hook to append the output across time of a simulation a replications file.
// the name of the replication file contains the information on the parameter
// values
val hookAppend = AppendToFileHook(workDirectory/"REPS_AGRE_T_${T}_dtp_${dtp}_n_${L}_a0_${a0}_d0_${d0}_ksi_${ksi}_sar_${sar}_a_${a}_w_${w}_Tag_${Tag}_Tab_${Tab}_Tr_${Tr}_Td_${Td}_d_${d}_dtsave_${dtsave}.csv", "${agreOut.content}")

// hook to create and initialize the header of a replications file. file must
// be previously created in a scalaTask
// the name of the replication file contains the information on the parameter
// values
val copyHook = CopyFileHook(f, workDirectory/"REPS_AGRE_T_${T}_dtp_${dtp}_n_${L}_a0_${a0}_d0_${d0}_ksi_${ksi}_sar_${sar}_a_${a}_w_${w}_Tag_${Tag}_Tab_${Tab}_Tr_${Tr}_Td_${Td}_d_${d}_dtsave_${dtsave}.csv")

///////////////////////////////////////////////////////////////////////////////
// 3- environment setup
///////////////////////////////////////////////////////////////////////////////

val env = LocalEnvironment(40)

///////////////////////////////////////////////////////////////////////////////
// 4 - workflow for paper
//////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////
// begin of clustering experiment for figure 3
val setParamClusteringExp=ScalaTask("""
    val ksi = 1.2
    val sar = 0.25
    val a = 0.0
    val Tag = 0.05
    val Tab = 50.0
    val Tr = 5.0
    val Td = 50.0
    val d = 1.0
    val T = 4000.0
    val dtp = 0.1
    val L = 40.0
    val d0 = 0.0
    val a0 = 0.2
    val dtsave = 1.0
    // create a file with a header consisting of all the model macro outputs
    val f = newFile()
    f.content = "t P N D A0 A1 Y nFrag meanSize stdSize maxSize meanES stdES connectance nMax nMin pMax pMin ripleyN ripleyD ripleyA0 ripleyA1\n"
""") set(
    inputs += w,
    outputs +=(f,T,dtp,L,a0,d0,ksi,sar,a,w,Tag,Tab,Tr,Td,d,dtsave)
)
// use this function to get all the data across time stored
val replicationsClustering =
  Replication(
    evaluation = scriptTask hook hookAppend on env,
    seed = mySeed,
    sample = 5
  )
val clusteringExploration = ExplorationTask( w in Seq(1.0,2.0,4.0,8.0) )
// end of clustering experiment for figure 3
/////////////////////////////////////////////

//////////////////////////////////////////////////
// begin of intensification exploration for fig 1
val setParamIntenseExp=ScalaTask("""
    val ksi = 1.2
    val sar = 0.25
    val w = 0.0
    val Tag = 0.1
    val Tab = 50.0
    val Tr = 5.0
    val Td = 50.0
    val d = 1.0
    val T = 4000.0
    val dtp = 0.1
    val L = 40.0
    val d0 = 0.0
    val a0 = 0.1
    val dtsave = 1.0
    // create a file with a header consisting of all the model macro outputs
    val f = newFile()
    f.content = "t P N D A0 A1 Y nFrag meanSize stdSize maxSize meanES stdES connectance nMax nMin pMax pMin ripleyN ripleyD ripleyA0 ripleyA1\n"
""") set(
    inputs += a,
    outputs +=(f,T,dtp,L,a0,d0,ksi,sar,a,w,Tag,Tab,Tr,Td,d,dtsave)
)
// use this function to get all the data across time stored
val replicationsIntensification =
  Replication(
    evaluation = scriptTask hook hookAppend on env,
    seed = mySeed,
    sample = 10
  )
val intensificationExploration = ExplorationTask( a in Seq(0.0,0.2) )
// end of intensification exploration fig 1
///////////////////////////////////////////

//////////////////////////////////////////////////
// begin of zoom for detail on landscape structure perco transition fig 2
val setParamZoomPerco=ScalaTask("""
    val ksi = 1.2
    val sar = 0.25
    val a = 0.0
    val w = 0.0
    val Tag = 0.1
    val Tab = 50.0
    val Tr = 5.0
    val Td = 50.0
    val d = 1.0
    val T = 100.0
    val dtp = 0.1
    val L = 40.0
    val d0 = 0.0
    val a0 = 0.35
    val dtsave = 0.01
    // create a file with a header consisting of all the model macro outputs
    val f = newFile()
    f.content = "t P N D A0 A1 Y nFrag meanSize stdSize maxSize meanES stdES connectance nMax nMin pMax pMin ripleyN ripleyD ripleyA0 ripleyA1\n"
""") set(
    outputs +=(f,T,dtp,L,a0,d0,ksi,sar,a,w,Tag,Tab,Tr,Td,d,dtsave)
)
// use this function to get all the data across time stored
val replicationsZoomPerco =
  Replication(
    evaluation = scriptTask hook hookAppend on env,
    seed = mySeed,
    sample = 10
  )
// end of perco zoom fig 2
///////////////////////////////////////////

//////////////////////////////////////////
// begin of longterm sampling for intensification

val readFinalStateIntensification =
    ScalaTask("""
    // read file as an array of lines and get last line
    val lastLineAgre = scala.io.Source.fromFile(agreOut).getLines.toList.last.mkString
    // split the string and store it in an array
    val valuesAgre = lastLineAgre.split(" ")

    val P = valuesAgre(1).toDouble
    val N = valuesAgre(2).toDouble
    val nMax = valuesAgre(14).toDouble
    val nMin = valuesAgre(15).toDouble
    val pMax = valuesAgre(16).toDouble
    val pMin = valuesAgre(17).toDouble
    """

    )set(
        inputs+=agreOut,
        (inputs, outputs)+=(T,dtp,L,a0,d0,ksi,sar,a,w,Tag,Tab,Tr,Td,d,dtsave,mySeed),
        outputs+=(P,N,nMax,nMin,pMax,pMin)
    )

val finalStateIntensificationTask = MoleTask(scriptTask -- readFinalStateIntensification)

val replicationsFinalStateIntensification =
  Replication(
    evaluation = finalStateIntensificationTask,
    seed = mySeed,
    sample = 10,
    aggregation = Seq (
      T aggregate average,
      dtp aggregate average,
      L aggregate average,
      a0 aggregate average,
      d0 aggregate average,
      ksi aggregate average,
      sar aggregate average,
      a aggregate average,
      w aggregate average,
      Tag aggregate average,
      Tab aggregate average,
      Tr aggregate average,
      Td aggregate average,
      d aggregate average,
      dtsave aggregate average,
      mySeed aggregate average,
      P,
      N,
      nMax,
      nMin,
      pMax,
      pMin)
  )

val longTermIntensification =
DirectSampling(
  evaluation = replicationsFinalStateIntensification on env,
  sampling =
    (T is 4000.0) x
    (dtp is 0.1) x
    (L is 40.0) x
    (a0 is 0.2) x
    (d0 is 0.0) x
    (ksi is 1.2) x
    (sar is 0.25) x
    (w is 0.0) x
    (Tab is 50.0) x
    (Tr is 5.0) x
    (Td is 50.0) x
    (d is 1.0) x
    (dtsave is "T") x
    ( Tag in LogRange(0.02,1.0,40) ) x
    ( a in Seq(0.0,0.25,0.5) ),
    // ( ( (Tag in LogRange(0.02,1.0,40)) x (a in Seq(0.0,0.333,0.666)) ) :: ( (Tag in (0.24 to 0.28 by 0.005)) x (a in Seq(0.0,0.333,0.666)) ) ),
)


// end of longterm sampling for intensification
//////////////////////////////////////////

//////////////////////////////////////////
// begin of longterm sampling for clustering

val readFinalStateClustering =
    ScalaTask("""
    // read file as an array of lines and get last line
    val lastLineAgre = scala.io.Source.fromFile(agreOut).getLines.toList.last.mkString
    // split the string and store it in an array
    val valuesAgre = lastLineAgre.split(" ")

    val P = valuesAgre(1).toDouble
    val N = valuesAgre(2).toDouble
    val nMax = valuesAgre(14).toDouble
    val nMin = valuesAgre(15).toDouble
    val pMax = valuesAgre(16).toDouble
    val pMin = valuesAgre(17).toDouble
    """

    )set(
        inputs+=agreOut,
        (inputs, outputs)+=(T,dtp,L,a0,d0,ksi,sar,a,w,Tag,Tab,Tr,Td,d,dtsave,mySeed),
        outputs+=(P,N,nMax,nMin,pMax,pMin)
    )

val finalStateClusteringTask = MoleTask(scriptTask -- readFinalStateClustering)

val replicationsFinalStateClustering =
  Replication(
    evaluation = finalStateClusteringTask,
    seed = mySeed,
    sample = 10,
    aggregation = Seq (
      T aggregate average,
      dtp aggregate average,
      L aggregate average,
      a0 aggregate average,
      d0 aggregate average,
      ksi aggregate average,
      sar aggregate average,
      a aggregate average,
      w aggregate average,
      Tag aggregate average,
      Tab aggregate average,
      Tr aggregate average,
      Td aggregate average,
      d aggregate average,
      dtsave aggregate average,
      mySeed aggregate average,
      P,
      N,
      nMax,
      nMin,
      pMax,
      pMin)
  )

val longTermClustering =
DirectSampling(
  evaluation = replicationsFinalStateClustering on env,
  sampling =
    (T is 4000.0) x
    (dtp is 0.1) x
    (L is 40.0) x
    (a0 is 0.2) x
    (d0 is 0.0) x
    (ksi is 1.2) x
    (sar is 0.25) x
    (Tab is 50.0) x
    (Tr is 5.0) x
    (Td is 50.0) x
    (d is 1.0) x
    (dtsave is "T") x
    (Tag in LogRange(0.02,1.0,40)) x
    (w in Seq(1.0,2.0,4.0)),
)

// end of longterm sampling for clustering
//////////////////////////////////////////


//////////////////////////////////////////
// begin of longterm sampling for clustering2

val readFinalStateClustering2 =
    ScalaTask("""
    // read file as an array of lines and get last line
    val lastLineAgre = scala.io.Source.fromFile(agreOut).getLines.toList.last.mkString
    // split the string and store it in an array
    val valuesAgre = lastLineAgre.split(" ")

    val N = valuesAgre(2).toDouble
    val maxSize = valuesAgre(10).toDouble
    val meanSize = valuesAgre(8).toDouble
    val stdSize = valuesAgre(9).toDouble
    val nFrag = valuesAgre(7).toDouble
    """

    )set(
        inputs+=agreOut,
        (inputs, outputs)+=(T,dtp,L,a0,d0,ksi,sar,a,w,Tag,Tab,Tr,Td,d,dtsave,mySeed),
        outputs+=(N,maxSize,meanSize,stdSize,nFrag)
    )

val finalStateClusteringTask2 = MoleTask(scriptTask -- readFinalStateClustering2)

val replicationsFinalStateClustering2 =
  Replication(
    evaluation = finalStateClusteringTask2,
    seed = mySeed,
    sample = 10,
    aggregation = Seq (
      T aggregate average,
      dtp aggregate average,
      L aggregate average,
      a0 aggregate average,
      d0 aggregate average,
      ksi aggregate average,
      sar aggregate average,
      a aggregate average,
      w aggregate average,
      Tag aggregate average,
      Tab aggregate average,
      Tr aggregate average,
      Td aggregate average,
      d aggregate average,
      dtsave aggregate average,
      mySeed aggregate average,
      N aggregate average,
      maxSize aggregate average,
      meanSize aggregate average,
      stdSize aggregate average,
      nFrag aggregate average)
  )

val longTermClustering2 =
DirectSampling(
  evaluation = replicationsFinalStateClustering2 on env,
  sampling =
    (T is 0.0) x
    (dtp is 0.1) x
    (L is 40.0) x
    (Tag is 0.1) x
    (d0 is 0.0) x
    (ksi is 1.2) x
    (sar is 0.25) x
    (w is 0.0) x
    (Tab is 50.0) x
    (Tr is 5.0) x
    (Td is 50.0) x
    (d is 1.0) x
    (dtsave is "T") x
    (a0 in (0.0 to 1.0 by 0.01)) x
    (w in Seq(0.0,1.0,2.0,3.0,4.0,8.0,16.0)),
)

// end of longterm sampling for clustering2
//////////////////////////////////////////

// clusteringExploration -< (setParamClusteringExp hook copyHook) -- replicationsClustering
// intensificationExploration -< (setParamIntenseExp hook copyHook) -- replicationsIntensification
// (setParamZoomPerco hook copyHook) -- replicationsZoomPerco
// longTermIntensification hook (workDirectory / "experimentTagA-260421.csv")
longTermClustering hook (workDirectory / "experimentTagW-280421.csv")
// longTermClustering2 hook (workDirectory / "experimentA0W-220421.csv")
